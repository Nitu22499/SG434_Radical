# Generated by Django 3.0.8 on 2020-08-01 04:09

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=200)),
                ('date_of_birth', models.DateField(null=True)),
                ('gender', models.CharField(choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE')], default='Male', max_length=10)),
                ('is_student', models.BooleanField(default=False)),
                ('is_teacher', models.BooleanField(default=False)),
                ('is_employee', models.BooleanField(default=False)),
                ('is_school_admin', models.BooleanField(default=False)),
                ('is_block_admin', models.BooleanField(default=False)),
                ('is_district_admin', models.BooleanField(default=False)),
                ('is_state_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_name', models.CharField(max_length=250, verbose_name='Block')),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district_name', models.CharField(choices=[('EAST SIKKIM', 'EAST SIKKIM'), ('WEST SIKKIM', 'WEST SIKKIM'), ('NORTH SIKKIM', 'NORTH SIKKIM'), ('SOUTH SIKKIM', 'SOUTH SIKKIM')], max_length=250, verbose_name='District')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(max_length=250)),
                ('school_board', models.CharField(choices=[('', 'BOARD'), ('NA', 'NA'), ('CBSE', 'CBSE'), ('STATE BOARD', 'STATE BOARD'), ('ICSE', 'ICSE')], default='CBSE', max_length=50)),
                ('school_cluster', models.CharField(blank=True, max_length=250)),
                ('school_block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.Block')),
                ('school_district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.District')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_board', models.CharField(blank=True, choices=[('', 'BOARD'), ('NA', 'NA'), ('CBSE', 'CBSE'), ('STATE BOARD', 'STATE BOARD'), ('ICSE', 'ICSE')], default='CBSE', max_length=100)),
                ('subject_name', models.CharField(blank=True, max_length=100)),
                ('subject_class', models.CharField(blank=True, choices=[('1', 'CLASS 1'), ('2', 'CLASS 2'), ('3', 'CLASS 3'), ('4', 'CLASS 4'), ('5', 'CLASS 5'), ('6', 'CLASS 6'), ('7', 'CLASS 7'), ('8', 'CLASS 8'), ('9', 'CLASS 9'), ('10', 'CLASS 10'), ('11', 'CLASS 11'), ('12', 'CLASS 12'), ('LKG', 'LKG'), ('UKG', 'UKG')], max_length=50)),
                ('subject_type', models.CharField(blank=True, choices=[('Scholastic', 'Scholastic'), ('Co -Scholastic', 'Co -Scholastic')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stud_mother_name', models.CharField(default='', max_length=30)),
                ('stud_class', models.CharField(blank=True, choices=[('1', 'CLASS 1'), ('2', 'CLASS 2'), ('3', 'CLASS 3'), ('4', 'CLASS 4'), ('5', 'CLASS 5'), ('6', 'CLASS 6'), ('7', 'CLASS 7'), ('8', 'CLASS 8'), ('9', 'CLASS 9'), ('10', 'CLASS 10'), ('11', 'CLASS 11'), ('12', 'CLASS 12'), ('LKG', 'LKG'), ('UKG', 'UKG')], max_length=5)),
                ('stud_section', models.CharField(blank=True, choices=[('', 'SECTION'), ('NA', 'NA'), ('A', 'SECTION A'), ('B', 'SECTION B'), ('C', 'SECTION C'), ('D', 'SECTION D'), ('E', 'SECTION E'), ('F', 'SECTION F')], default='NA', max_length=5)),
                ('stud_stream', models.CharField(blank=True, choices=[('', 'STREAM'), ('NA', 'NA'), ('COMMERCE', 'COMMERCE'), ('ELECTRICAL TECHNOLOGY', 'ELECTRICAL TECHNOLOGY'), ('HUMANITIES', 'HUMANITIES'), ('INFORMATION TECHNOLOGY', 'INFORMATION TECHNOLOGY'), ('PCM', 'PCM'), ('PCB', 'PCB'), ('TOURISM', 'TOURISM')], default='NA', max_length=25)),
                ('stud_rollno', models.CharField(max_length=10)),
                ('stud_religion', models.CharField(blank=True, choices=[('HINDU', 'HINDU'), ('MUSLIM', 'MUSLIM'), ('CHRISTIAN', 'CHRISTIAN'), ('SIKH', 'SIKH'), ('BUDDHIST', 'BUDDHIST'), ('PARSI', 'PARSI'), ('JAIN', 'JAIN'), ('OTHER', 'OTHER')], default='NA', max_length=15)),
                ('stud_socialCategory', models.CharField(blank=True, choices=[('GENERAL', 'GENERAL'), ('SC', 'SC'), ('ST', 'ST'), ('OBC', 'OBC'), ('MBC', 'MBC'), ('OTHER', 'OTHER')], default='NA', max_length=10)),
                ('stud_caste', models.CharField(blank=True, choices=[('RAI', 'RAI'), ('BAHUN', 'BAHUN'), ('SUBBA', 'SUBBA'), ('TAMANG', 'TAMANG'), ('KAMI', 'KAMI'), ('CHHETRI', 'CHHETRI'), ('LEPCHA', 'LEPCHA'), ('GURUNG', 'GURUNG'), ('PRADHAN', 'PRADHAN'), ('MANGER', 'MANGER'), ('DAMAI', 'DAMAI'), ('LOHAR', 'LOHAR'), ('BHUTIA', 'BHUTIA'), ('KHAWAS', 'KHAWAS'), ('OTHER', 'OTHER')], default='NA', max_length=10)),
                ('stud_disability', models.CharField(blank=True, choices=[('NA', 'NA'), ('BLINDNESS', 'BLINDNESS'), ('LOW VISION', 'LOW VISION'), ('HEARING IMPAIRMENT', 'HEARING IMPAIRMENT'), ('SPEECH & LANGUAGE', 'SPEECH & LANGUAGE'), ('LOCOMOTOR DISABILITY', 'LOCOMOTOR DISABILITY'), ('MENTAL ILLNESS', 'MENTAL ILLNESS'), ('SPECIFIC LEARNING DISABILITY', 'SPECIFIC LEARNING DISABILITY'), ('CEREBRAL PALSY', 'CEREBRAL PALSY'), ('AUTISM SPECTRUM DISORDER', 'AUTISM SPECTRUM DISORDER'), ('MULTIPLE DISABILITY INCLUDING DEAF, BLINDNESS', 'MULTIPLE DISABILITY INCLUDING DEAF, BLINDNESS'), ('LEPROSY CURED STUDENTS', 'LEPROSY CURED STUDENTS'), ('DWARFISM', 'DWARFISM'), ('INTELLECTUAL DISABILITY', 'INTELLECTUAL DISABILITY'), ('MUSCULAR DYSTROPHY', 'MUSCULAR DYSTROPHY'), ('CHRONIC NEUROLOGICAL COND', 'CHRONIC NEUROLOGICAL COND'), ('MULTIPLE SCLEROSIS', 'MULTIPLE SCLEROSIS'), ('THALASSEMIA', 'THALASSEMIA'), ('HEMOPHILLIA', 'HEMOPHILLIA'), ('SICKLE CELl DISEASE', 'SICKLE CELL DISEASE'), ('ACID ATTACK VICTIM', 'ACID ATTACK VICTIM'), ("PARKINSON's DISEASE", "PARKINSON's DISEASE")], default='NA', max_length=50)),
                ('stud_address', models.TextField(default='', max_length=100)),
                ('stud_admissionDate', models.DateField(null=True)),
                ('stud_parentContact', models.BigIntegerField(null=True)),
                ('stud_parentSecContact', models.BigIntegerField(null=True)),
                ('stud_school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.School')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='block',
            name='block_district',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.District', verbose_name='District'),
        ),
        migrations.AddField(
            model_name='block',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
